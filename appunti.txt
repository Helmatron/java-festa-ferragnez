Quando dobbiamo inserire una data in java, se nota, usare:

Metodo statico, che ti permette di impostare con semplicità tutto:

LocalDateTime dataRiferimento = LocalDateTime.of(anno, mese, giorno, 0, 0) (o altro formato fra i disponibili.

Metodo statico: non ha bisogno del costruttore.

<< ESERCIZIO RANDOM >>

public class EserciziRandom {

	Random ran = new Random();

	ran.nextInt = ran.nextInt();

	System.out.println("Numero random " + nextInt);

	// valori da 0 a 9
	ran.nextInt = ran.nextInt(10);


	// Passiamo da stringa a byte e viceversa
	// Le stringhe sono non modificabili, quindi 
	String ciao = "ciao";
	byte [] byteStr = ciao.getBytes();
	String ciaoByte = new String(byteStr);

	System.out.println(ciao);
	System.out.println(byteStr);
	System.out.println(ciaoByte);

	ciao.toUppercase();
	System.out.println(ciao);
	//la stringa non si modifica, non è modificabile

	ciao = ciao.toUpperCase();
	System.out.println(ciao);
	// solo riassegnando la stringa, quindi creandone una nuova, si può modificare.

	// si conta da 0 da sinistra a destra
	// Per prendere la lettera "a" da ciao, prendo la lettera contando e inserisco il posto del carattere di partenza e quello di fine, nel caso della "a" posizionata al posto 2, la finale è il 3.
	ciao = ciao.substring(2, 3);

	// per prendere la "a" e la "o" devi mettere 4, perchè lui prende l'ultimo numero -1
	ciao = ciao.substring(2, 4);

	ciao = "ciao";

	// per prendere le lettere bisogna convertire i caratteri in stringhe inserendo una stringa vuota per fargli concatenare quel che c'è dopo.
	ciao = "" + ciao.charAt(0) + ciao.charAt(3);

	System.out.println(ciao);

}


In Java, il carattere di segnaposto (placeholder) viene utilizzato come parte della formattazione delle stringhe. Il carattere di segnaposto più comune è %, che viene utilizzato con determinati lettere di conversione per rappresentare diversi tipi di dati all'interno di una stringa formattata. Alcuni esempi comuni di caratteri di segnaposto in Java includono:

%s: Utilizzato per inserire una stringa.
%d: Utilizzato per inserire un numero intero.
%f: Utilizzato per inserire un numero in virgola mobile.
%c: Utilizzato per inserire un singolo carattere.
%n: Utilizzato per inserire un carattere di nuova riga.


public class DifferenzeConJS {
	public static void main(String[] args) {

	//js: let numero = 10
	int numero = 10;
	var numero2 = 10

	//js: let pippo = 'pippo'
	String pippo = "pippo";
	
	numero = 20;
	
	//js: const num = 1
	// Final è come const, non può mai cambiare, è una costante.
	final int num = 1;

	// Dead code: il software si accorge che uno dei due valori in if non avrà mai luogo, perchè una costante.
	final int age = 18;
	if(age >= 18) {
	System.out.println("Puoi bere");
	} else {
	System.out.println("Non puoi bere");
	}

	// undefined di js corrisponde ad una variabile non inizzializzata e rompe tutto, non puoi usarla
	Integer numeroInteri;

	// non simile o equivalente al null di js, java è come se mettesse in standby la variabile, restituendo null, non ci posso fare operazioni sopra.
	Integer numeroIntero = null;

	// però posso inizializzarlo con delle operazioni
	if(numeroIntero == null) {
	numeroIntero = 10;
}
	System.out.println(numeroIntero.toString());


	Scanner scan = new Scanner(System.in);
	System.out.println("Inserire giorno della settimana (0-7)");
	int giornoSettimana = scan.nextInt();

	//switch è simile a if ma più fluido e permette di far eseguire una serie di if finchè non metti un break
	switch (giornoSettimana) {
	case 1:
	System.out.println("Lunedì");
	break;
	case 2:
	System.out.println("Martedì");
	default:
	System.out.println("Giorno non considerato");
}

	// in if viene così
	if(giornoSettimana == 1) {
} else if (giornoSettimana != 1) {
}


String [] nomi = {"valore1", "valore2", "valore3"};

String [] nomi2 = String[10];

System.out.println(nomi);

for(int i = i < 3; i++) {
	System.out.println(nomi[i]);
}

for(int i = 0; i < nomi2.length; i++) {

}

String nome = "Giuseppe";
for(int i = 0; 1 < nome.length(); i++) {
	System.out.println(nome.charAT(i));
}

	}

}